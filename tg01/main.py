import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from aiogram import Router
from config import TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
router = Router()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    button_start = InlineKeyboardButton(text="üü¢ –ü—Ä–∏–≤–µ—Ç!", callback_data="greet")
    button_exit = InlineKeyboardButton(text="üü¢ –ü–æ–∫–∞", callback_data="exit")
    button_dynamic = InlineKeyboardButton(text="üü¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é", callback_data="dynamic_menu")
    button_news = InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", url="https://www.rbc.ru")
    button_music = InlineKeyboardButton(text="üéµ –ú—É–∑—ã–∫–∞", url="https://zvuk.com/?ysclid=m2x2ua6nvl182333032")
    button_video = InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", url="https://vk.com/video?ysclid=m2x2xciode192627501")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [button_start],
        [button_exit],
        [button_dynamic],
        [button_news, button_music, button_video]
    ])
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–ø—Ü–∏—è–º–∏
def get_dynamic_keyboard():
    button_option1 = InlineKeyboardButton(text="–û–ø—Ü–∏—è 1", callback_data="option1")
    button_option2 = InlineKeyboardButton(text="–û–ø—Ü–∏—è 2", callback_data="option2")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [button_option1, button_option2]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dynamic
@router.message(Command('dynamic'))
async def dynamic_command(message: types.Message):
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –æ–ø—Ü–∏–π:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="show_more")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "greet")
async def greet_command(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(f"–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}!", reply_markup=get_main_keyboard())

@router.callback_query(F.data == "exit")
async def exit_command(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {callback.from_user.first_name}!", reply_markup=get_main_keyboard())

@router.callback_query(F.data == "dynamic_menu")
async def dynamic_menu_command(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –æ–ø—Ü–∏–π:",
                                  reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                      [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="show_more")]
                                  ]))

@router.callback_query(F.data == "show_more")
async def show_more_command(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                                  reply_markup=get_dynamic_keyboard())

@router.callback_query(F.data == "option1")
async def option1_command(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –û–ø—Ü–∏–∏ 1.", reply_markup=get_main_keyboard())

@router.callback_query(F.data == "option2")
async def option2_command(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –û–ø—Ü–∏–∏ 2.", reply_markup=get_main_keyboard())

# –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()
dp.include_router(router)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∫–æ–º–∞–Ω–¥.")
    dp.run_polling(bot, skip_updates=True)
